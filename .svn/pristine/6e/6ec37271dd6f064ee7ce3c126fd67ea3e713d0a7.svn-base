package com.lzf.waterpolicy;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import com.lzf.gallery.utils.ImageLoader;
import com.lzf.gallery.utils.ImageLoader.Type;
import com.lzf.waterpolicy.http.GetData;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.media.MediaPlayer;
import android.media.MediaPlayer.OnErrorListener;
import android.media.MediaPlayer.OnPreparedListener;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.storage.StorageManager;
import android.view.View;
import android.widget.ImageView;
import android.widget.MediaController;
import android.widget.Toast;
import android.widget.VideoView;

/**
 * 媒体播放器
 */
public class MediaActivity extends Activity {

	private byte[] image;
	private byte[] video;
	private ImageView imageView;
	private VideoView videoView;
	private MediaController mediaController;
	private ProgressDialog progress;
	private File currentImageFile;
	private AlertDialog alert;

	private String videoPath;
	private String imagePath;

	private final int IMAGE = 0;

	private Handler handler = new Handler() {
		@SuppressLint("NewApi")
		public void handleMessage(android.os.Message msg) {
			switch (msg.what) {
			case IMAGE:
				if (progress != null) {
					progress.dismiss();
				}
				if (image != null) {
					String temp = imagePath.substring(imagePath.lastIndexOf('.'));
					if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
						File dir = new File(Environment.getExternalStorageDirectory(), "photograph");
						if (!dir.exists()) {
							dir.mkdirs();
						}
						currentImageFile = new File(dir, System.currentTimeMillis() + temp);
						if (!currentImageFile.exists()) {
							try {
								currentImageFile.createNewFile();
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						try {
							FileOutputStream fOutputStream = new FileOutputStream(currentImageFile);
							fOutputStream.write(image);
							fOutputStream.flush();
							fOutputStream.close();
						} catch (FileNotFoundException e) {
							e.printStackTrace();
						} catch (IOException e) {
							e.printStackTrace();
						}
					} else {
						String dirTemp = null;
						StorageManager storageManager = (StorageManager) getSystemService(Context.STORAGE_SERVICE);
						Class<?>[] paramClasses = {};
						Method getVolumePathsMethod;
						try {
							getVolumePathsMethod = StorageManager.class.getMethod("getVolumePaths", paramClasses);
							getVolumePathsMethod.setAccessible(true);
							Object[] params = {};
							Object invoke = getVolumePathsMethod.invoke(storageManager, params);
							for (int i = 0; i < ((String[]) invoke).length; i++) {
								if (!((String[]) invoke)[i]
										.equals(Environment.getExternalStorageDirectory().toString())) {
									dirTemp = ((String[]) invoke)[i];
								}
							}
						} catch (NoSuchMethodException e) {
							e.printStackTrace();
						} catch (SecurityException e) {
							e.printStackTrace();
						} catch (IllegalAccessException e) {
							e.printStackTrace();
						} catch (IllegalArgumentException e) {
							e.printStackTrace();
						} catch (InvocationTargetException e) {
							e.printStackTrace();
						}
						File dir = new File(dirTemp, "photograph");
						if (!dir.exists()) {
							dir.mkdirs();
						}
						currentImageFile = new File(dir, System.currentTimeMillis() + temp);
						if (!currentImageFile.exists()) {
							try {
								currentImageFile.createNewFile();
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
						try {
							FileOutputStream fOutputStream = new FileOutputStream(currentImageFile);
							fOutputStream.write(image);
							fOutputStream.flush();
							fOutputStream.close();
						} catch (FileNotFoundException e) {
							e.printStackTrace();
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
					ImageLoader.getInstance(3, Type.LIFO).loadImage(currentImageFile.getAbsolutePath(), imageView);
				} else {
					Toast.makeText(MediaActivity.this, "连接不到服务器，请检查你的网络或稍后重试。", Toast.LENGTH_SHORT).show();
					onBackPressed();
				}
				break;
			default:
				if (progress != null) {
					progress.dismiss();
				}
				break;
			}

		}
	};

	@SuppressLint("NewApi")
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_media);

		videoPath = getIntent().getStringExtra("video");
		imagePath = getIntent().getStringExtra("image");

		if (videoPath != null && !videoPath.equals("")) {
			progress = ProgressDialog.show(MediaActivity.this, null, "正在加载...", true, false);
			videoView = (VideoView) findViewById(R.id.video);
			mediaController = new MediaController(this);
			videoView.setVideoPath(videoPath);
			videoView.setMediaController(mediaController);
			videoView.requestFocus();
			videoView.start();
			mediaController.setMediaPlayer(videoView);
			videoView.setVisibility(View.VISIBLE);
			videoView.setOnPreparedListener(new OnPreparedListener() {

				@Override
				public void onPrepared(MediaPlayer mp) {
					handler.sendEmptyMessage(-1);
				}
			});
			videoView.setOnErrorListener(new OnErrorListener() {
				@Override
				public boolean onError(MediaPlayer arg0, int arg1, int arg2) {
					AlertDialog dialog = null;
					Builder builder = new Builder(MediaActivity.this);
					dialog = builder.setTitle("当前硬件不支持该格式").setMessage("很抱歉，无法播放此视频。").setCancelable(false)
							.setNegativeButton("确定", new OnClickListener() {
								@Override
								public void onClick(DialogInterface arg0, int arg1) {
									onBackPressed();
								}
							}).create();
					dialog.show();
					return true;
				}
			});
		} else if (imagePath != null && !imagePath.equals("")) {
			imageView = (ImageView) findViewById(R.id.image);
			if (imagePath.contains("http://")) {
				progress = ProgressDialog.show(MediaActivity.this, null, "正在加载...", true, false);
				new Thread() {

					public void run() {
						image = GetData.getImage(imagePath);
						handler.sendEmptyMessage(IMAGE);
					}

				}.start();
			} else {
				ImageLoader.getInstance(3, Type.LIFO).loadImage(imagePath, imageView);
			}
			imageView.setVisibility(View.VISIBLE);
		}
	}

	@Override
	public void onBackPressed() {
		if (currentImageFile != null) {
			currentImageFile.delete();
		}
		finish();
	}
}
